
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000972  00000a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000a0e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b04  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d67  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ecc  00000000  00000000  0000340b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000042d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000866  00000000  00000000  00004540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb5  00000000  00000000  00004da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
   2:	00 00       	nop
   4:	92 c1       	rjmp	.+804    	; 0x32a <__bad_interrupt>
   6:	00 00       	nop
   8:	90 c1       	rjmp	.+800    	; 0x32a <__bad_interrupt>
   a:	00 00       	nop
   c:	8e c1       	rjmp	.+796    	; 0x32a <__bad_interrupt>
   e:	00 00       	nop
  10:	8c c1       	rjmp	.+792    	; 0x32a <__bad_interrupt>
  12:	00 00       	nop
  14:	8a c1       	rjmp	.+788    	; 0x32a <__bad_interrupt>
  16:	00 00       	nop
  18:	88 c1       	rjmp	.+784    	; 0x32a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	86 c1       	rjmp	.+780    	; 0x32a <__bad_interrupt>
  1e:	00 00       	nop
  20:	84 c1       	rjmp	.+776    	; 0x32a <__bad_interrupt>
  22:	00 00       	nop
  24:	82 c1       	rjmp	.+772    	; 0x32a <__bad_interrupt>
  26:	00 00       	nop
  28:	1c c3       	rjmp	.+1592   	; 0x662 <__vector_10>
  2a:	00 00       	nop
  2c:	54 c3       	rjmp	.+1704   	; 0x6d6 <__vector_11>
  2e:	00 00       	nop
  30:	7c c1       	rjmp	.+760    	; 0x32a <__bad_interrupt>
  32:	00 00       	nop
  34:	7a c1       	rjmp	.+756    	; 0x32a <__bad_interrupt>
  36:	00 00       	nop
  38:	78 c1       	rjmp	.+752    	; 0x32a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	76 c1       	rjmp	.+748    	; 0x32a <__bad_interrupt>
  3e:	00 00       	nop
  40:	74 c1       	rjmp	.+744    	; 0x32a <__bad_interrupt>
  42:	00 00       	nop
  44:	72 c1       	rjmp	.+740    	; 0x32a <__bad_interrupt>
  46:	00 00       	nop
  48:	70 c1       	rjmp	.+736    	; 0x32a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6e c1       	rjmp	.+732    	; 0x32a <__bad_interrupt>
  4e:	00 00       	nop
  50:	6c c1       	rjmp	.+728    	; 0x32a <__bad_interrupt>
  52:	00 00       	nop
  54:	6a c1       	rjmp	.+724    	; 0x32a <__bad_interrupt>
  56:	00 00       	nop
  58:	68 c1       	rjmp	.+720    	; 0x32a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	66 c1       	rjmp	.+716    	; 0x32a <__bad_interrupt>
  5e:	00 00       	nop
  60:	64 c1       	rjmp	.+712    	; 0x32a <__bad_interrupt>
  62:	00 00       	nop
  64:	62 c1       	rjmp	.+708    	; 0x32a <__bad_interrupt>
  66:	00 00       	nop
  68:	60 c1       	rjmp	.+704    	; 0x32a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5e c1       	rjmp	.+700    	; 0x32a <__bad_interrupt>
  6e:	00 00       	nop
  70:	5c c1       	rjmp	.+696    	; 0x32a <__bad_interrupt>
  72:	00 00       	nop
  74:	5a c1       	rjmp	.+692    	; 0x32a <__bad_interrupt>
  76:	00 00       	nop
  78:	58 c1       	rjmp	.+688    	; 0x32a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	56 c1       	rjmp	.+684    	; 0x32a <__bad_interrupt>
  7e:	00 00       	nop
  80:	54 c1       	rjmp	.+680    	; 0x32a <__bad_interrupt>
  82:	00 00       	nop
  84:	52 c1       	rjmp	.+676    	; 0x32a <__bad_interrupt>
  86:	00 00       	nop
  88:	50 c1       	rjmp	.+672    	; 0x32a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4e c1       	rjmp	.+668    	; 0x32a <__bad_interrupt>
  8e:	00 00       	nop
  90:	4c c1       	rjmp	.+664    	; 0x32a <__bad_interrupt>
  92:	00 00       	nop
  94:	4a c1       	rjmp	.+660    	; 0x32a <__bad_interrupt>
  96:	00 00       	nop
  98:	48 c1       	rjmp	.+656    	; 0x32a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	46 c1       	rjmp	.+652    	; 0x32a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	44 c1       	rjmp	.+648    	; 0x32a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	42 c1       	rjmp	.+644    	; 0x32a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	40 c1       	rjmp	.+640    	; 0x32a <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__trampolines_end>:
  ac:	22 2c       	mov	r2, r2
  ae:	20 6d       	ori	r18, 0xD0	; 208
  b0:	75 73       	andi	r23, 0x35	; 53
  b2:	74 20       	and	r7, r4
  b4:	62 65       	ori	r22, 0x52	; 82
  b6:	20 3f       	cpi	r18, 0xF0	; 240
  b8:	20 6f       	ori	r18, 0xF0	; 240
  ba:	72 20       	and	r7, r2
  bc:	3d 0d       	add	r19, r13
  be:	0a 00       	.word	0x000a	; ????

000000c0 <__c.1883>:
  c0:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
  d0:	22 00                                               ".

000000d2 <__c.1881>:
  d2:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
  e2:	31 0d 0a 00                                         1...

000000e6 <__c.1879>:
  e6:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

000000f6 <__c.1877>:
  f6:	0d 0a 00                                            ...

000000f9 <__c.1875>:
  f9:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
 109:	37 0d 0a 00                                         7...

0000010d <__c.1873>:
 10d:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

0000011b <__c.1871>:
 11b:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
 12b:	0d 0a 00                                            ...

0000012e <__c.1869>:
 12e:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

0000013d <__c.1867>:
 13d:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
 14d:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
 15d:	20 72 65 71 27 64 0d 0a 00                           req'd...

00000166 <__c.1838>:
 166:	0d 0a 00                                            ...

00000169 <__c.1835>:
 169:	3e 20 00                                            > .

0000016c <__c.1833>:
 16c:	0d 0a 54 65 65 6e 73 79 20 55 53 42 20 53 65 72     ..Teensy USB Ser
 17c:	69 61 6c 20 45 78 61 6d 70 6c 65 2c 20 53 69 6d     ial Example, Sim
 18c:	70 6c 65 20 50 69 6e 20 43 6f 6e 74 72 6f 6c 20     ple Pin Control 
 19c:	53 68 65 6c 6c 0d 0a 0d 0a 45 78 61 6d 70 6c 65     Shell....Example
 1ac:	20 43 6f 6d 6d 61 6e 64 73 0d 0a 20 20 42 30 3f      Commands..  B0?
 1bc:	20 20 20 52 65 61 64 20 50 6f 72 74 20 42 2c 20        Read Port B, 
 1cc:	70 69 6e 20 30 0d 0a 20 20 43 32 3d 30 20 20 57     pin 0..  C2=0  W
 1dc:	72 69 74 65 20 50 6f 72 74 20 43 2c 20 70 69 6e     rite Port C, pin
 1ec:	20 31 20 4c 4f 57 0d 0a 20 20 44 36 3d 31 20 20      1 LOW..  D6=1  
 1fc:	57 72 69 74 65 20 50 6f 72 74 20 44 2c 20 70 69     Write Port D, pi
 20c:	6e 20 36 20 48 49 47 48 20 20 28 44 36 20 69 73     n 6 HIGH  (D6 is
 21c:	20 4c 45 44 20 70 69 6e 29 0d 0a 0d 0a 00            LED pin).....

0000022a <descriptor_list>:
 22a:	00 01 00 00 d7 02 12 00 02 00 00 94 02 43 00 03     .............C..
 23a:	00 00 90 02 04 01 03 09 04 7a 02 14 02 03 09 04     .........z......
 24a:	62 02 16 03 03 09 04 54 02 0c                       b......T..

00000254 <string3>:
 254:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000262 <string2>:
 262:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 272:	69 00 61 00 6c 00 00 00                             i.a.l...

0000027a <string1>:
 27a:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 28a:	6d 00 65 00 00 00                                   m.e...

00000290 <string0>:
 290:	04 03 09 04                                         ....

00000294 <config1_descriptor>:
 294:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 2a4:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 2b4:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 2c4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 2d4:	40 00 00                                            @..

000002d7 <device_descriptor>:
 2d7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 2e7:	03 01                                               ..

000002e9 <endpoint_config_table>:
 2e9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000002f4 <__ctors_end>:
 2f4:	11 24       	eor	r1, r1
 2f6:	1f be       	out	0x3f, r1	; 63
 2f8:	cf ef       	ldi	r28, 0xFF	; 255
 2fa:	da e0       	ldi	r29, 0x0A	; 10
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	cd bf       	out	0x3d, r28	; 61

00000300 <__do_copy_data>:
 300:	11 e0       	ldi	r17, 0x01	; 1
 302:	a0 e0       	ldi	r26, 0x00	; 0
 304:	b1 e0       	ldi	r27, 0x01	; 1
 306:	e2 e7       	ldi	r30, 0x72	; 114
 308:	f9 e0       	ldi	r31, 0x09	; 9
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__do_copy_data+0x10>
 30c:	05 90       	lpm	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	a8 30       	cpi	r26, 0x08	; 8
 312:	b1 07       	cpc	r27, r17
 314:	d9 f7       	brne	.-10     	; 0x30c <__do_copy_data+0xc>

00000316 <__do_clear_bss>:
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	a8 e0       	ldi	r26, 0x08	; 8
 31a:	b1 e0       	ldi	r27, 0x01	; 1
 31c:	01 c0       	rjmp	.+2      	; 0x320 <.do_clear_bss_start>

0000031e <.do_clear_bss_loop>:
 31e:	1d 92       	st	X+, r1

00000320 <.do_clear_bss_start>:
 320:	ac 30       	cpi	r26, 0x0C	; 12
 322:	b2 07       	cpc	r27, r18
 324:	e1 f7       	brne	.-8      	; 0x31e <.do_clear_bss_loop>
 326:	cc d0       	rcall	.+408    	; 0x4c0 <main>
 328:	22 c3       	rjmp	.+1604   	; 0x96e <_exit>

0000032a <__bad_interrupt>:
 32a:	6a ce       	rjmp	.-812    	; 0x0 <__vectors>

0000032c <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
	char c;
	while (1) {
		c = pgm_read_byte(s++);
 332:	fe 01       	movw	r30, r28
 334:	84 91       	lpm	r24, Z
 336:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
 338:	88 23       	and	r24, r24
		usb_serial_putchar(c);
 33a:	11 f0       	breq	.+4      	; 0x340 <send_str+0x14>
		c = pgm_read_byte(s++);
 33c:	4f d1       	rcall	.+670    	; 0x5dc <usb_serial_putchar>
	}
}
 33e:	f9 cf       	rjmp	.-14     	; 0x332 <send_str+0x6>
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	8c 01       	movw	r16, r24
 354:	d6 2f       	mov	r29, r22
	int16_t r;
	uint8_t count=0;
 356:	c0 e0       	ldi	r28, 0x00	; 0

	while (count < size) {
 358:	cd 17       	cp	r28, r29
		r = usb_serial_getchar();
 35a:	f0 f4       	brcc	.+60     	; 0x398 <recv_str+0x52>
		if (r != -1) {
 35c:	09 d1       	rcall	.+530    	; 0x570 <usb_serial_getchar>
 35e:	8f 3f       	cpi	r24, 0xFF	; 255
 360:	98 07       	cpc	r25, r24
			if (r == '\r' || r == '\n') return count;
 362:	b1 f0       	breq	.+44     	; 0x390 <recv_str+0x4a>
 364:	8d 30       	cpi	r24, 0x0D	; 13
 366:	91 05       	cpc	r25, r1
 368:	b9 f0       	breq	.+46     	; 0x398 <recv_str+0x52>
 36a:	8a 30       	cpi	r24, 0x0A	; 10
 36c:	91 05       	cpc	r25, r1
			if (r >= ' ' && r <= '~') {
 36e:	a1 f0       	breq	.+40     	; 0x398 <recv_str+0x52>
 370:	9c 01       	movw	r18, r24
 372:	20 52       	subi	r18, 0x20	; 32
 374:	31 09       	sbc	r19, r1
 376:	2f 35       	cpi	r18, 0x5F	; 95
 378:	31 05       	cpc	r19, r1
				*buf++ = r;
 37a:	70 f7       	brcc	.-36     	; 0x358 <recv_str+0x12>
 37c:	78 01       	movw	r14, r16
 37e:	ef ef       	ldi	r30, 0xFF	; 255
 380:	ee 1a       	sub	r14, r30
 382:	fe 0a       	sbc	r15, r30
				usb_serial_putchar(r);
 384:	f8 01       	movw	r30, r16
 386:	80 83       	st	Z, r24
				*buf++ = r;
 388:	29 d1       	rcall	.+594    	; 0x5dc <usb_serial_putchar>
				count++;
			}
		} else {
			if (!usb_configured() ||
 38a:	cf 5f       	subi	r28, 0xFF	; 255
 38c:	87 01       	movw	r16, r14
 38e:	e4 cf       	rjmp	.-56     	; 0x358 <recv_str+0x12>
 390:	ec d0       	rcall	.+472    	; 0x56a <usb_configured>
			  !(usb_serial_get_control() & USB_SERIAL_DTR)) {
				// user no longer connected
				return 255;
 392:	81 11       	cpse	r24, r1
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <recv_str+0x62>
 396:	cf ef       	ldi	r28, 0xFF	; 255
 398:	8c 2f       	mov	r24, r28
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
			  !(usb_serial_get_control() & USB_SERIAL_DTR)) {
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
			if (!usb_configured() ||
 3a6:	08 95       	ret
 3a8:	59 d1       	rcall	.+690    	; 0x65c <usb_serial_get_control>
 3aa:	80 fd       	sbrc	r24, 0
 3ac:	d5 cf       	rjmp	.-86     	; 0x358 <recv_str+0x12>
 3ae:	f3 cf       	rjmp	.-26     	; 0x396 <recv_str+0x50>

000003b0 <parse_and_execute_command>:

// parse a user command and execute it, or print an error message
//
void parse_and_execute_command(const char *buf, uint8_t num)
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
	uint8_t port, pin, val;

	if (num < 3) {
		send_str(PSTR("unrecognized format, 3 chars min req'd\r\n"));
 3b6:	8d e3       	ldi	r24, 0x3D	; 61
 3b8:	91 e0       	ldi	r25, 0x01	; 1
	if (num < 3) {
 3ba:	63 30       	cpi	r22, 0x03	; 3
 3bc:	80 f0       	brcs	.+32     	; 0x3de <parse_and_execute_command+0x2e>
		return;
	}
	// first character is the port letter
	if (buf[0] >= 'A' && buf[0] <= 'F') {
 3be:	88 81       	ld	r24, Y
 3c0:	ef eb       	ldi	r30, 0xBF	; 191
 3c2:	e8 0f       	add	r30, r24
 3c4:	e6 30       	cpi	r30, 0x06	; 6
 3c6:	70 f0       	brcs	.+28     	; 0x3e4 <parse_and_execute_command+0x34>
		port = buf[0] - 'A';
	} else if (buf[0] >= 'a' && buf[0] <= 'f') {
 3c8:	ef e9       	ldi	r30, 0x9F	; 159
 3ca:	e8 0f       	add	r30, r24
 3cc:	e6 30       	cpi	r30, 0x06	; 6
 3ce:	50 f0       	brcs	.+20     	; 0x3e4 <parse_and_execute_command+0x34>
		port = buf[0] - 'a';
	} else {
		send_str(PSTR("Unknown port \""));
 3d0:	8e e2       	ldi	r24, 0x2E	; 46
 3d2:	91 e0       	ldi	r25, 0x01	; 1
		usb_serial_putchar(buf[0]);
 3d4:	ab df       	rcall	.-170    	; 0x32c <send_str>
 3d6:	88 81       	ld	r24, Y
		send_str(PSTR("\", must be A - F\r\n"));
 3d8:	01 d1       	rcall	.+514    	; 0x5dc <usb_serial_putchar>
	}
	// otherwise, error message
	send_str(PSTR("Unknown command \""));
	usb_serial_putchar(buf[0]);
	send_str(PSTR("\", must be ? or =\r\n"));
}
 3da:	8b e1       	ldi	r24, 0x1B	; 27
	send_str(PSTR("\", must be ? or =\r\n"));
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	df 91       	pop	r29
	if (buf[1] >= '0' && buf[1] <= '7') {
 3e0:	cf 91       	pop	r28
 3e2:	a4 cf       	rjmp	.-184    	; 0x32c <send_str>
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	80 53       	subi	r24, 0x30	; 48
	if (buf[2] == '?') {
 3e8:	88 30       	cpi	r24, 0x08	; 8
 3ea:	e8 f4       	brcc	.+58     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 3ec:	9a 81       	ldd	r25, Y+2	; 0x02
		*(uint8_t *)(0x21 + port * 3) &= ~(1 << pin);
 3ee:	9f 33       	cpi	r25, 0x3F	; 63
 3f0:	21 f5       	brne	.+72     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
 3f2:	43 e0       	ldi	r20, 0x03	; 3
 3f4:	e4 9f       	mul	r30, r20
 3f6:	f0 01       	movw	r30, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	a9 01       	movw	r20, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 402:	44 0f       	add	r20, r20
 404:	55 1f       	adc	r21, r21
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 40a:	ca 01       	movw	r24, r20
 40c:	24 2f       	mov	r18, r20
 40e:	20 95       	com	r18
 410:	91 a1       	ldd	r25, Z+33	; 0x21
		val = *(uint8_t *)(0x20 + port * 3) & (1 << pin);
 412:	92 23       	and	r25, r18
		usb_serial_putchar(val ? '1' : '0');
 414:	91 a3       	std	Z+33, r25	; 0x21
 416:	90 a1       	ldd	r25, Z+32	; 0x20
 418:	89 23       	and	r24, r25
 41a:	69 f4       	brne	.+26     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
		send_str(PSTR("\r\n"));
 41c:	80 e3       	ldi	r24, 0x30	; 48
		send_str(PSTR("Unknown pin \""));
 41e:	de d0       	rcall	.+444    	; 0x5dc <usb_serial_putchar>
 420:	86 ef       	ldi	r24, 0xF6	; 246
 422:	90 e0       	ldi	r25, 0x00	; 0
		usb_serial_putchar(buf[0]);
 424:	dc cf       	rjmp	.-72     	; 0x3de <parse_and_execute_command+0x2e>
 426:	8d e0       	ldi	r24, 0x0D	; 13
 428:	91 e0       	ldi	r25, 0x01	; 1
		send_str(PSTR("\", must be 0 to 7\r\n"));
 42a:	80 df       	rcall	.-256    	; 0x32c <send_str>
 42c:	88 81       	ld	r24, Y
 42e:	d6 d0       	rcall	.+428    	; 0x5dc <usb_serial_putchar>
		usb_serial_putchar(val ? '1' : '0');
 430:	89 ef       	ldi	r24, 0xF9	; 249
 432:	90 e0       	ldi	r25, 0x00	; 0
	if (num >= 4 && buf[2] == '=') {
 434:	d4 cf       	rjmp	.-88     	; 0x3de <parse_and_execute_command+0x2e>
 436:	81 e3       	ldi	r24, 0x31	; 49
 438:	f2 cf       	rjmp	.-28     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 43a:	63 30       	cpi	r22, 0x03	; 3
		if (buf[3] == '0') {
 43c:	c9 f1       	breq	.+114    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
 43e:	9d 33       	cpi	r25, 0x3D	; 61
 440:	b9 f5       	brne	.+110    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
			*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 442:	9b 81       	ldd	r25, Y+3	; 0x03
 444:	90 33       	cpi	r25, 0x30	; 48
 446:	b9 f4       	brne	.+46     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
 448:	53 e0       	ldi	r21, 0x03	; 3
 44a:	e5 9f       	mul	r30, r21
 44c:	f0 01       	movw	r30, r0
 44e:	11 24       	eor	r1, r1
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	a9 01       	movw	r20, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	8a 95       	dec	r24
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
 460:	ca 01       	movw	r24, r20
			*(uint8_t *)(0x22 + port * 3) &= ~(1 << pin);
 462:	91 a1       	ldd	r25, Z+33	; 0x21
 464:	98 2b       	or	r25, r24
 466:	91 a3       	std	Z+33, r25	; 0x21
			*(uint8_t *)(0x22 + port * 3) |= (1 << pin);
 468:	80 95       	com	r24
}
 46a:	92 a1       	ldd	r25, Z+34	; 0x22
 46c:	89 23       	and	r24, r25
 46e:	82 a3       	std	Z+34, r24	; 0x22
		} else if (buf[3] == '1') {
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
			*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 474:	08 95       	ret
 476:	91 33       	cpi	r25, 0x31	; 49
 478:	99 f4       	brne	.+38     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
 47a:	53 e0       	ldi	r21, 0x03	; 3
 47c:	e5 9f       	mul	r30, r21
 47e:	f0 01       	movw	r30, r0
 480:	11 24       	eor	r1, r1
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	a9 01       	movw	r20, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
 48a:	44 0f       	add	r20, r20
 48c:	55 1f       	adc	r21, r21
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
			*(uint8_t *)(0x22 + port * 3) |= (1 << pin);
 492:	ca 01       	movw	r24, r20
 494:	91 a1       	ldd	r25, Z+33	; 0x21
			send_str(PSTR("Unknown value \""));
 496:	98 2b       	or	r25, r24
 498:	91 a3       	std	Z+33, r25	; 0x21
 49a:	92 a1       	ldd	r25, Z+34	; 0x22
			usb_serial_putchar(buf[3]);
 49c:	89 2b       	or	r24, r25
			send_str(PSTR("\", must be 0 or 1\r\n"));
 49e:	e7 cf       	rjmp	.-50     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
 4a0:	86 ee       	ldi	r24, 0xE6	; 230
 4a2:	90 e0       	ldi	r25, 0x00	; 0
	send_str(PSTR("Unknown command \""));
 4a4:	43 df       	rcall	.-378    	; 0x32c <send_str>
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	99 d0       	rcall	.+306    	; 0x5dc <usb_serial_putchar>
 4aa:	82 ed       	ldi	r24, 0xD2	; 210
	usb_serial_putchar(buf[0]);
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	97 cf       	rjmp	.-210    	; 0x3de <parse_and_execute_command+0x2e>
 4b0:	80 ec       	ldi	r24, 0xC0	; 192
	send_str(PSTR("\", must be ? or =\r\n"));
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	3b df       	rcall	.-394    	; 0x32c <send_str>
 4b6:	88 81       	ld	r24, Y
 4b8:	91 d0       	rcall	.+290    	; 0x5dc <usb_serial_putchar>
 4ba:	8c ea       	ldi	r24, 0xAC	; 172
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	8f cf       	rjmp	.-226    	; 0x3de <parse_and_execute_command+0x2e>

000004c0 <main>:
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	a0 97       	sbiw	r28, 0x20	; 32
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
	CPU_PRESCALE(0);
 4d4:	80 e8       	ldi	r24, 0x80	; 128
 4d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 4da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	LED_CONFIG;
 4de:	56 9a       	sbi	0x0a, 6	; 10
	while (!usb_configured()) /* wait */ ;
 4e0:	5e 9a       	sbi	0x0b, 6	; 11
 4e2:	2a d0       	rcall	.+84     	; 0x538 <usb_init>
 4e4:	42 d0       	rcall	.+132    	; 0x56a <usb_configured>
 4e6:	88 23       	and	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e8:	e9 f3       	breq	.-6      	; 0x4e4 <main+0x24>
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	83 ed       	ldi	r24, 0xD3	; 211
 4ee:	90 e3       	ldi	r25, 0x30	; 48
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x30>
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0x3a>
 4fa:	00 00       	nop
		usb_serial_flush_input();
 4fc:	af d0       	rcall	.+350    	; 0x65c <usb_serial_get_control>
		send_str(PSTR("\r\nTeensy USB Serial Example, "
 4fe:	80 ff       	sbrs	r24, 0
 500:	fd cf       	rjmp	.-6      	; 0x4fc <main+0x3c>
 502:	59 d0       	rcall	.+178    	; 0x5b6 <usb_serial_flush_input>
			send_str(PSTR("> "));
 504:	8c e6       	ldi	r24, 0x6C	; 108
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	11 df       	rcall	.-478    	; 0x32c <send_str>
			n = recv_str(buf, sizeof(buf));
 50a:	89 e6       	ldi	r24, 0x69	; 105
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e df       	rcall	.-484    	; 0x32c <send_str>
 510:	60 e2       	ldi	r22, 0x20	; 32
 512:	ce 01       	movw	r24, r28
			if (n == 255) break;
 514:	01 96       	adiw	r24, 0x01	; 1
			send_str(PSTR("\r\n"));
 516:	17 df       	rcall	.-466    	; 0x346 <recv_str>
 518:	18 2f       	mov	r17, r24
 51a:	8f 3f       	cpi	r24, 0xFF	; 255
 51c:	79 f3       	breq	.-34     	; 0x4fc <main+0x3c>
			parse_and_execute_command(buf, n);
 51e:	86 e6       	ldi	r24, 0x66	; 102
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	04 df       	rcall	.-504    	; 0x32c <send_str>
 524:	61 2f       	mov	r22, r17
 526:	ce 01       	movw	r24, r28
			send_str(PSTR("> "));
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	42 df       	rcall	.-380    	; 0x3b0 <parse_and_execute_command>
 52c:	ee cf       	rjmp	.-36     	; 0x50a <main+0x4a>

0000052e <usb_wait_in_ready>:
	UEDATX = 0;
	UEDATX = signals;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
 52e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 532:	80 ff       	sbrs	r24, 0
 534:	fc cf       	rjmp	.-8      	; 0x52e <usb_wait_in_ready>
 536:	08 95       	ret

00000538 <usb_init>:
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
 53e:	80 ea       	ldi	r24, 0xA0	; 160
 540:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 544:	82 e1       	ldi	r24, 0x12	; 18
 546:	89 bd       	out	0x29, r24	; 41
 548:	09 b4       	in	r0, 0x29	; 41
 54a:	00 fe       	sbrs	r0, 0
 54c:	fd cf       	rjmp	.-6      	; 0x548 <usb_init+0x10>
 54e:	80 e9       	ldi	r24, 0x90	; 144
 550:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 554:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 558:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
 55c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 566:	78 94       	sei
 568:	08 95       	ret

0000056a <usb_configured>:
 56a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 56e:	08 95       	ret

00000570 <usb_serial_getchar>:
 570:	9f b7       	in	r25, 0x3f	; 63
 572:	f8 94       	cli
 574:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 578:	81 11       	cpse	r24, r1
 57a:	04 c0       	rjmp	.+8      	; 0x584 <usb_serial_getchar+0x14>
 57c:	9f bf       	out	0x3f, r25	; 63
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	9f ef       	ldi	r25, 0xFF	; 255
 582:	08 95       	ret
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 58a:	2b e6       	ldi	r18, 0x6B	; 107
 58c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 590:	85 fd       	sbrc	r24, 5
 592:	05 c0       	rjmp	.+10     	; 0x59e <usb_serial_getchar+0x2e>
 594:	82 ff       	sbrs	r24, 2
 596:	f2 cf       	rjmp	.-28     	; 0x57c <usb_serial_getchar+0xc>
 598:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 59c:	f7 cf       	rjmp	.-18     	; 0x58c <usb_serial_getchar+0x1c>
 59e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 5a2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5a6:	25 fd       	sbrc	r18, 5
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <usb_serial_getchar+0x40>
 5aa:	2b e6       	ldi	r18, 0x6B	; 107
 5ac:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5b0:	9f bf       	out	0x3f, r25	; 63
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	08 95       	ret

000005b6 <usb_serial_flush_input>:
 5b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 5ba:	88 23       	and	r24, r24
 5bc:	59 f0       	breq	.+22     	; 0x5d4 <usb_serial_flush_input+0x1e>
 5be:	8f b7       	in	r24, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	93 e0       	ldi	r25, 0x03	; 3
 5c4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 5c8:	2b e6       	ldi	r18, 0x6B	; 107
 5ca:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5ce:	95 fd       	sbrc	r25, 5
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <usb_serial_flush_input+0x20>
 5d2:	8f bf       	out	0x3f, r24	; 63
 5d4:	08 95       	ret
 5d6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5da:	f7 cf       	rjmp	.-18     	; 0x5ca <usb_serial_flush_input+0x14>

000005dc <usb_serial_putchar>:
 5dc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 5e0:	91 11       	cpse	r25, r1
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <usb_serial_putchar+0xc>
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	08 95       	ret
 5e8:	9f b7       	in	r25, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	24 e0       	ldi	r18, 0x04	; 4
 5ee:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 5f2:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <transmit_previous_timeout>
 5f6:	22 23       	and	r18, r18
 5f8:	41 f0       	breq	.+16     	; 0x60a <usb_serial_putchar+0x2e>
 5fa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5fe:	25 fd       	sbrc	r18, 5
 600:	02 c0       	rjmp	.+4      	; 0x606 <usb_serial_putchar+0x2a>
 602:	9f bf       	out	0x3f, r25	; 63
 604:	ef cf       	rjmp	.-34     	; 0x5e4 <usb_serial_putchar+0x8>
 606:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_previous_timeout>
 60a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 60e:	27 5e       	subi	r18, 0xE7	; 231
 610:	34 e0       	ldi	r19, 0x04	; 4
 612:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 616:	45 fd       	sbrc	r20, 5
 618:	12 c0       	rjmp	.+36     	; 0x63e <usb_serial_putchar+0x62>
 61a:	9f bf       	out	0x3f, r25	; 63
 61c:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 620:	92 13       	cpse	r25, r18
 622:	04 c0       	rjmp	.+8      	; 0x62c <usb_serial_putchar+0x50>
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_previous_timeout>
 62a:	dc cf       	rjmp	.-72     	; 0x5e4 <usb_serial_putchar+0x8>
 62c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 630:	99 23       	and	r25, r25
 632:	c1 f2       	breq	.-80     	; 0x5e4 <usb_serial_putchar+0x8>
 634:	9f b7       	in	r25, 0x3f	; 63
 636:	f8 94       	cli
 638:	30 93 e9 00 	sts	0x00E9, r19	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 63c:	ea cf       	rjmp	.-44     	; 0x612 <usb_serial_putchar+0x36>
 63e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 646:	85 fd       	sbrc	r24, 5
 648:	03 c0       	rjmp	.+6      	; 0x650 <usb_serial_putchar+0x74>
 64a:	8a e3       	ldi	r24, 0x3A	; 58
 64c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 650:	85 e0       	ldi	r24, 0x05	; 5
 652:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
 656:	9f bf       	out	0x3f, r25	; 63
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	08 95       	ret

0000065c <usb_serial_get_control>:
 65c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 660:	08 95       	ret

00000662 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 662:	1f 92       	push	r1
 664:	0f 92       	push	r0
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	0f 92       	push	r0
 66a:	11 24       	eor	r1, r1
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 670:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
 674:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
 678:	83 ff       	sbrs	r24, 3
 67a:	11 c0       	rjmp	.+34     	; 0x69e <__vector_10+0x3c>
		UENUM = 0;
 67c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 686:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 68a:	92 e1       	ldi	r25, 0x12	; 18
 68c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 690:	98 e0       	ldi	r25, 0x08	; 8
 692:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 696:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
		cdc_line_rtsdtr = 0;
 69a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
        }
	if (intbits & (1<<SOFI)) {
 69e:	82 ff       	sbrs	r24, 2
 6a0:	13 c0       	rjmp	.+38     	; 0x6c8 <__vector_10+0x66>
		if (usb_configuration) {
 6a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 6a6:	88 23       	and	r24, r24
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <__vector_10+0x66>
			t = transmit_flush_timer;
 6aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <transmit_flush_timer>
			if (t) {
 6ae:	88 23       	and	r24, r24
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <__vector_10+0x66>
				transmit_flush_timer = --t;
 6b2:	81 50       	subi	r24, 0x01	; 1
 6b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
				if (!t) {
 6b8:	81 11       	cpse	r24, r1
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <__vector_10+0x66>
					UENUM = CDC_TX_ENDPOINT;
 6bc:	84 e0       	ldi	r24, 0x04	; 4
 6be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
 6c2:	8a e3       	ldi	r24, 0x3A	; 58
 6c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 6d6:	1f 92       	push	r1
 6d8:	0f 92       	push	r0
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	0f 92       	push	r0
 6de:	11 24       	eor	r1, r1
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	2f 93       	push	r18
 6ea:	3f 93       	push	r19
 6ec:	4f 93       	push	r20
 6ee:	5f 93       	push	r21
 6f0:	6f 93       	push	r22
 6f2:	7f 93       	push	r23
 6f4:	8f 93       	push	r24
 6f6:	9f 93       	push	r25
 6f8:	af 93       	push	r26
 6fa:	bf 93       	push	r27
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 704:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
 708:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 70c:	83 ff       	sbrs	r24, 3
 70e:	74 c0       	rjmp	.+232    	; 0x7f8 <__vector_11+0x122>
                bmRequestType = UEDATX;
 710:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
 714:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
 718:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
 71c:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 720:	fe 2c       	mov	r15, r14
 722:	e8 2e       	mov	r14, r24
                wIndex = UEDATX;
 724:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
 728:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 72c:	10 2f       	mov	r17, r16
 72e:	08 2f       	mov	r16, r24
                wLength = UEDATX;
 730:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
 734:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 738:	22 ef       	ldi	r18, 0xF2	; 242
 73a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 73e:	c6 30       	cpi	r28, 0x06	; 6
 740:	09 f0       	breq	.+2      	; 0x744 <__vector_11+0x6e>
 742:	66 c0       	rjmp	.+204    	; 0x810 <__vector_11+0x13a>
 744:	2a e2       	ldi	r18, 0x2A	; 42
 746:	32 e0       	ldi	r19, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 748:	f9 01       	movw	r30, r18
 74a:	45 91       	lpm	r20, Z+
 74c:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 74e:	e4 16       	cp	r14, r20
 750:	f5 06       	cpc	r15, r21
 752:	09 f0       	breq	.+2      	; 0x756 <__vector_11+0x80>
 754:	4a c0       	rjmp	.+148    	; 0x7ea <__vector_11+0x114>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 756:	f9 01       	movw	r30, r18
 758:	32 96       	adiw	r30, 0x02	; 2
 75a:	45 91       	lpm	r20, Z+
 75c:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 75e:	04 17       	cp	r16, r20
 760:	15 07       	cpc	r17, r21
 762:	09 f0       	breq	.+2      	; 0x766 <__vector_11+0x90>
 764:	42 c0       	rjmp	.+132    	; 0x7ea <__vector_11+0x114>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 766:	f9 01       	movw	r30, r18
 768:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 76a:	45 91       	lpm	r20, Z+
 76c:	54 91       	lpm	r21, Z
				list += 2;
 76e:	f9 01       	movw	r30, r18
 770:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 772:	e4 91       	lpm	r30, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 774:	8f 3f       	cpi	r24, 0xFF	; 255
 776:	91 05       	cpc	r25, r1
 778:	19 f0       	breq	.+6      	; 0x780 <__vector_11+0xaa>
 77a:	10 f0       	brcs	.+4      	; 0x780 <__vector_11+0xaa>
 77c:	8f ef       	ldi	r24, 0xFF	; 255
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	e8 17       	cp	r30, r24
 782:	08 f4       	brcc	.+2      	; 0x786 <__vector_11+0xb0>
 784:	8e 2f       	mov	r24, r30
	UEINTX = ~(1<<TXINI);
 786:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 788:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 78c:	29 2f       	mov	r18, r25
 78e:	25 70       	andi	r18, 0x05	; 5
 790:	d9 f3       	breq	.-10     	; 0x788 <__vector_11+0xb2>
				if (i & (1<<RXOUTI)) return;	// abort
 792:	92 fd       	sbrc	r25, 2
 794:	13 c0       	rjmp	.+38     	; 0x7bc <__vector_11+0xe6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 796:	98 2f       	mov	r25, r24
 798:	81 31       	cpi	r24, 0x11	; 17
 79a:	08 f0       	brcs	.+2      	; 0x79e <__vector_11+0xc8>
 79c:	90 e1       	ldi	r25, 0x10	; 16
 79e:	fa 01       	movw	r30, r20
				for (i = n; i; i--) {
 7a0:	29 2f       	mov	r18, r25
 7a2:	21 11       	cpse	r18, r1
 7a4:	2f c0       	rjmp	.+94     	; 0x804 <__vector_11+0x12e>
 7a6:	49 0f       	add	r20, r25
 7a8:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 7aa:	e8 2f       	mov	r30, r24
 7ac:	e9 1b       	sub	r30, r25
 7ae:	9e 2f       	mov	r25, r30
	UEINTX = ~(1<<TXINI);
 7b0:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 7b4:	e1 11       	cpse	r30, r1
 7b6:	24 c0       	rjmp	.+72     	; 0x800 <__vector_11+0x12a>
 7b8:	80 31       	cpi	r24, 0x10	; 16
 7ba:	10 f5       	brcc	.+68     	; 0x800 <__vector_11+0x12a>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	7f 91       	pop	r23
 7ce:	6f 91       	pop	r22
 7d0:	5f 91       	pop	r21
 7d2:	4f 91       	pop	r20
 7d4:	3f 91       	pop	r19
 7d6:	2f 91       	pop	r18
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti
 7ea:	29 5f       	subi	r18, 0xF9	; 249
 7ec:	3f 4f       	sbci	r19, 0xFF	; 255
				if (i >= NUM_DESC_LIST) {
 7ee:	42 e0       	ldi	r20, 0x02	; 2
 7f0:	24 35       	cpi	r18, 0x54	; 84
 7f2:	34 07       	cpc	r19, r20
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <__vector_11+0x122>
 7f6:	a8 cf       	rjmp	.-176    	; 0x748 <__vector_11+0x72>
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 7f8:	81 e2       	ldi	r24, 0x21	; 33
 7fa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7fe:	de cf       	rjmp	.-68     	; 0x7bc <__vector_11+0xe6>
{
 800:	89 2f       	mov	r24, r25
 802:	c2 cf       	rjmp	.-124    	; 0x788 <__vector_11+0xb2>
					UEDATX = pgm_read_byte(desc_addr++);
 804:	64 91       	lpm	r22, Z
 806:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				for (i = n; i; i--) {
 80a:	21 50       	subi	r18, 0x01	; 1
 80c:	31 96       	adiw	r30, 0x01	; 1
 80e:	c9 cf       	rjmp	.-110    	; 0x7a2 <__vector_11+0xcc>
		if (bRequest == SET_ADDRESS) {
 810:	c5 30       	cpi	r28, 0x05	; 5
 812:	49 f4       	brne	.+18     	; 0x826 <__vector_11+0x150>
	UEINTX = ~(1<<TXINI);
 814:	8e ef       	ldi	r24, 0xFE	; 254
 816:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			UDADDR = wValue | (1<<ADDEN);
 81a:	89 de       	rcall	.-750    	; 0x52e <usb_wait_in_ready>
 81c:	8e 2d       	mov	r24, r14
 81e:	80 68       	ori	r24, 0x80	; 128
 820:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 824:	cb cf       	rjmp	.-106    	; 0x7bc <__vector_11+0xe6>
 826:	c9 30       	cpi	r28, 0x09	; 9
 828:	69 f5       	brne	.+90     	; 0x884 <__vector_11+0x1ae>
 82a:	d1 11       	cpse	r29, r1
			usb_configuration = wValue;
 82c:	e5 cf       	rjmp	.-54     	; 0x7f8 <__vector_11+0x122>
 82e:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <usb_configuration>
			cdc_line_rtsdtr = 0;
 832:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			transmit_flush_timer = 0;
 836:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <transmit_flush_timer>
	UEINTX = ~(1<<TXINI);
 83a:	8e ef       	ldi	r24, 0xFE	; 254
 83c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			cfg = endpoint_config_table;
 840:	21 e0       	ldi	r18, 0x01	; 1
 842:	89 ee       	ldi	r24, 0xE9	; 233
				UENUM = i;
 844:	92 e0       	ldi	r25, 0x02	; 2
 846:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
 84a:	ac 01       	movw	r20, r24
 84c:	4f 5f       	subi	r20, 0xFF	; 255
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	fc 01       	movw	r30, r24
				UECONX = en;
 852:	34 91       	lpm	r19, Z
 854:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
 858:	33 23       	and	r19, r19
					UECFG0X = pgm_read_byte(cfg++);
 85a:	91 f0       	breq	.+36     	; 0x880 <__vector_11+0x1aa>
 85c:	fa 01       	movw	r30, r20
 85e:	44 91       	lpm	r20, Z
 860:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
 864:	31 96       	adiw	r30, 0x01	; 1
 866:	e4 91       	lpm	r30, Z
 868:	03 96       	adiw	r24, 0x03	; 3
 86a:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			for (i=1; i<5; i++) {
 86e:	2f 5f       	subi	r18, 0xFF	; 255
 870:	25 30       	cpi	r18, 0x05	; 5
        		UERST = 0x1E;
 872:	49 f7       	brne	.-46     	; 0x846 <__vector_11+0x170>
					UERST = (1 << i);
 874:	8e e1       	ldi	r24, 0x1E	; 30
 876:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
 87a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				en = pgm_read_byte(cfg++);
 87e:	9e cf       	rjmp	.-196    	; 0x7bc <__vector_11+0xe6>
 880:	ca 01       	movw	r24, r20
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 882:	f5 cf       	rjmp	.-22     	; 0x86e <__vector_11+0x198>
 884:	c8 30       	cpi	r28, 0x08	; 8
 886:	61 f4       	brne	.+24     	; 0x8a0 <__vector_11+0x1ca>
 888:	d0 38       	cpi	r29, 0x80	; 128
			usb_wait_in_ready();
 88a:	09 f0       	breq	.+2      	; 0x88e <__vector_11+0x1b8>
 88c:	b5 cf       	rjmp	.-150    	; 0x7f8 <__vector_11+0x122>
			UEDATX = usb_configuration;
 88e:	4f de       	rcall	.-866    	; 0x52e <usb_wait_in_ready>
 890:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 894:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
 898:	8e ef       	ldi	r24, 0xFE	; 254
 89a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 89e:	8e cf       	rjmp	.-228    	; 0x7bc <__vector_11+0xe6>
 8a0:	c1 32       	cpi	r28, 0x21	; 33
 8a2:	79 f4       	brne	.+30     	; 0x8c2 <__vector_11+0x1ec>
 8a4:	d1 3a       	cpi	r29, 0xA1	; 161
			usb_wait_in_ready();
 8a6:	09 f0       	breq	.+2      	; 0x8aa <__vector_11+0x1d4>
 8a8:	a7 cf       	rjmp	.-178    	; 0x7f8 <__vector_11+0x122>
 8aa:	41 de       	rcall	.-894    	; 0x52e <usb_wait_in_ready>
 8ac:	e0 e0       	ldi	r30, 0x00	; 0
 8ae:	f1 e0       	ldi	r31, 0x01	; 1
 8b0:	87 e0       	ldi	r24, 0x07	; 7
				UEDATX = *p++;
 8b2:	91 e0       	ldi	r25, 0x01	; 1
 8b4:	21 91       	ld	r18, Z+
 8b6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			for (i=0; i<7; i++) {
 8ba:	8e 17       	cp	r24, r30
 8bc:	9f 07       	cpc	r25, r31
 8be:	d1 f7       	brne	.-12     	; 0x8b4 <__vector_11+0x1de>
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 8c0:	eb cf       	rjmp	.-42     	; 0x898 <__vector_11+0x1c2>
 8c2:	c0 32       	cpi	r28, 0x20	; 32
 8c4:	a9 f4       	brne	.+42     	; 0x8f0 <__vector_11+0x21a>
 8c6:	d1 32       	cpi	r29, 0x21	; 33
 8c8:	09 f0       	breq	.+2      	; 0x8cc <__vector_11+0x1f6>
	while (!(UEINTX & (1<<RXOUTI))) ;
 8ca:	96 cf       	rjmp	.-212    	; 0x7f8 <__vector_11+0x122>
 8cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8d0:	82 ff       	sbrs	r24, 2
 8d2:	fc cf       	rjmp	.-8      	; 0x8cc <__vector_11+0x1f6>
 8d4:	e0 e0       	ldi	r30, 0x00	; 0
 8d6:	f1 e0       	ldi	r31, 0x01	; 1
 8d8:	87 e0       	ldi	r24, 0x07	; 7
				*p++ = UEDATX;
 8da:	91 e0       	ldi	r25, 0x01	; 1
 8dc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			for (i=0; i<7; i++) {
 8e0:	21 93       	st	Z+, r18
 8e2:	8e 17       	cp	r24, r30
 8e4:	9f 07       	cpc	r25, r31
	UEINTX = ~(1<<RXOUTI);
 8e6:	d1 f7       	brne	.-12     	; 0x8dc <__vector_11+0x206>
 8e8:	8b ef       	ldi	r24, 0xFB	; 251
 8ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 8ee:	d4 cf       	rjmp	.-88     	; 0x898 <__vector_11+0x1c2>
 8f0:	c2 32       	cpi	r28, 0x22	; 34
 8f2:	39 f4       	brne	.+14     	; 0x902 <__vector_11+0x22c>
 8f4:	d1 32       	cpi	r29, 0x21	; 33
			cdc_line_rtsdtr = wValue;
 8f6:	09 f0       	breq	.+2      	; 0x8fa <__vector_11+0x224>
 8f8:	7f cf       	rjmp	.-258    	; 0x7f8 <__vector_11+0x122>
			usb_wait_in_ready();
 8fa:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <__data_end>
		if (bRequest == GET_STATUS) {
 8fe:	17 de       	rcall	.-978    	; 0x52e <usb_wait_in_ready>
 900:	cb cf       	rjmp	.-106    	; 0x898 <__vector_11+0x1c2>
			usb_wait_in_ready();
 902:	c1 11       	cpse	r28, r1
 904:	11 c0       	rjmp	.+34     	; 0x928 <__vector_11+0x252>
			if (bmRequestType == 0x82) {
 906:	13 de       	rcall	.-986    	; 0x52e <usb_wait_in_ready>
 908:	d2 38       	cpi	r29, 0x82	; 130
				UENUM = wIndex;
 90a:	49 f4       	brne	.+18     	; 0x91e <__vector_11+0x248>
 90c:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
 910:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 914:	c5 fb       	bst	r28, 5
 916:	cc 27       	eor	r28, r28
				UENUM = 0;
 918:	c0 f9       	bld	r28, 0
 91a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UEDATX = i;
 91e:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
 922:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 926:	b8 cf       	rjmp	.-144    	; 0x898 <__vector_11+0x1c2>
 928:	8c 2f       	mov	r24, r28
 92a:	8d 7f       	andi	r24, 0xFD	; 253
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	09 f0       	breq	.+2      	; 0x932 <__vector_11+0x25c>
		  && bmRequestType == 0x02 && wValue == 0) {
 930:	63 cf       	rjmp	.-314    	; 0x7f8 <__vector_11+0x122>
 932:	d2 30       	cpi	r29, 0x02	; 2
 934:	09 f0       	breq	.+2      	; 0x938 <__vector_11+0x262>
 936:	60 cf       	rjmp	.-320    	; 0x7f8 <__vector_11+0x122>
 938:	ef 28       	or	r14, r15
 93a:	09 f0       	breq	.+2      	; 0x93e <__vector_11+0x268>
			i = wIndex & 0x7F;
 93c:	5d cf       	rjmp	.-326    	; 0x7f8 <__vector_11+0x122>
			if (i >= 1 && i <= MAX_ENDPOINT) {
 93e:	0f 77       	andi	r16, 0x7F	; 127
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	80 0f       	add	r24, r16
 944:	84 30       	cpi	r24, 0x04	; 4
 946:	08 f0       	brcs	.+2      	; 0x94a <__vector_11+0x274>
	UEINTX = ~(1<<TXINI);
 948:	57 cf       	rjmp	.-338    	; 0x7f8 <__vector_11+0x122>
 94a:	8e ef       	ldi	r24, 0xFE	; 254
 94c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UENUM = i;
 950:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 954:	c3 30       	cpi	r28, 0x03	; 3
 956:	09 f4       	brne	.+2      	; 0x95a <__vector_11+0x284>
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 958:	4f cf       	rjmp	.-354    	; 0x7f8 <__vector_11+0x122>
 95a:	89 e1       	ldi	r24, 0x19	; 25
 95c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	01 c0       	rjmp	.+2      	; 0x968 <__vector_11+0x292>
 966:	88 0f       	add	r24, r24
 968:	0a 95       	dec	r16
 96a:	ea f7       	brpl	.-6      	; 0x966 <__vector_11+0x290>
 96c:	84 cf       	rjmp	.-248    	; 0x876 <__vector_11+0x1a0>

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
